//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DrappingTestLoadBalancer.DrappingServiceRoutine {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IsFileExistRequestDto", Namespace="http://schemas.datacontract.org/2004/07/DrappingServiceRoutine.RequestDto")]
    [System.SerializableAttribute()]
    public partial class IsFileExistRequestDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinationPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ImageNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestinationPath {
            get {
                return this.DestinationPathField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationPathField, value) != true)) {
                    this.DestinationPathField = value;
                    this.RaisePropertyChanged("DestinationPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ImageName {
            get {
                return this.ImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameField, value) != true)) {
                    this.ImageNameField = value;
                    this.RaisePropertyChanged("ImageName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IsFileExistResponseDto", Namespace="http://schemas.datacontract.org/2004/07/DrappingServiceRoutine.ResponseDto")]
    [System.SerializableAttribute()]
    public partial class IsFileExistResponseDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ImageNameToBeDrappedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ImageNameToBeDrapped {
            get {
                return this.ImageNameToBeDrappedField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageNameToBeDrappedField, value) != true)) {
                    this.ImageNameToBeDrappedField = value;
                    this.RaisePropertyChanged("ImageNameToBeDrapped");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DrapImageRequestDto", Namespace="http://schemas.datacontract.org/2004/07/DrappingServiceRoutine.RequestDto")]
    [System.SerializableAttribute()]
    public partial class DrapImageRequestDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DrappedImageByteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourcePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] DrappedImageByte {
            get {
                return this.DrappedImageByteField;
            }
            set {
                if ((object.ReferenceEquals(this.DrappedImageByteField, value) != true)) {
                    this.DrappedImageByteField = value;
                    this.RaisePropertyChanged("DrappedImageByte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePath {
            get {
                return this.SourcePathField;
            }
            set {
                if ((object.ReferenceEquals(this.SourcePathField, value) != true)) {
                    this.SourcePathField = value;
                    this.RaisePropertyChanged("SourcePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DrapImageResponseDto", Namespace="http://schemas.datacontract.org/2004/07/DrappingServiceRoutine.ResponseDto")]
    [System.SerializableAttribute()]
    public partial class DrapImageResponseDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SavedImagePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SavedImagePath {
            get {
                return this.SavedImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.SavedImagePathField, value) != true)) {
                    this.SavedImagePathField = value;
                    this.RaisePropertyChanged("SavedImagePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SaveFileRequestDto", Namespace="http://schemas.datacontract.org/2004/07/DrappingServiceRoutine.RequestDto")]
    [System.SerializableAttribute()]
    public partial class SaveFileRequestDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DrappedImageByteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourcePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] DrappedImageByte {
            get {
                return this.DrappedImageByteField;
            }
            set {
                if ((object.ReferenceEquals(this.DrappedImageByteField, value) != true)) {
                    this.DrappedImageByteField = value;
                    this.RaisePropertyChanged("DrappedImageByte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourcePath {
            get {
                return this.SourcePathField;
            }
            set {
                if ((object.ReferenceEquals(this.SourcePathField, value) != true)) {
                    this.SourcePathField = value;
                    this.RaisePropertyChanged("SourcePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SaveFileResponceDto", Namespace="http://schemas.datacontract.org/2004/07/DrappingServiceRoutine.ResponseDto")]
    [System.SerializableAttribute()]
    public partial class SaveFileResponceDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSavedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SavedImagePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSaved {
            get {
                return this.IsSavedField;
            }
            set {
                if ((this.IsSavedField.Equals(value) != true)) {
                    this.IsSavedField = value;
                    this.RaisePropertyChanged("IsSaved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SavedImagePath {
            get {
                return this.SavedImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.SavedImagePathField, value) != true)) {
                    this.SavedImagePathField = value;
                    this.RaisePropertyChanged("SavedImagePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DrappingServiceRoutine.IDrappingServiceRoutine")]
    public interface IDrappingServiceRoutine {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrappingServiceRoutine/IsFileExist", ReplyAction="http://tempuri.org/IDrappingServiceRoutine/IsFileExistResponse")]
        DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistResponseDto IsFileExist(DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistRequestDto isfileexistdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrappingServiceRoutine/IsFileExist", ReplyAction="http://tempuri.org/IDrappingServiceRoutine/IsFileExistResponse")]
        System.Threading.Tasks.Task<DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistResponseDto> IsFileExistAsync(DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistRequestDto isfileexistdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrappingServiceRoutine/DrapImage", ReplyAction="http://tempuri.org/IDrappingServiceRoutine/DrapImageResponse")]
        DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageResponseDto DrapImage(DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageRequestDto drapimageresponsedto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrappingServiceRoutine/DrapImage", ReplyAction="http://tempuri.org/IDrappingServiceRoutine/DrapImageResponse")]
        System.Threading.Tasks.Task<DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageResponseDto> DrapImageAsync(DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageRequestDto drapimageresponsedto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrappingServiceRoutine/SaveImage", ReplyAction="http://tempuri.org/IDrappingServiceRoutine/SaveImageResponse")]
        DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileResponceDto SaveImage(DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileRequestDto savefilerequestdto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrappingServiceRoutine/SaveImage", ReplyAction="http://tempuri.org/IDrappingServiceRoutine/SaveImageResponse")]
        System.Threading.Tasks.Task<DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileResponceDto> SaveImageAsync(DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileRequestDto savefilerequestdto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDrappingServiceRoutineChannel : DrappingTestLoadBalancer.DrappingServiceRoutine.IDrappingServiceRoutine, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DrappingServiceRoutineClient : System.ServiceModel.ClientBase<DrappingTestLoadBalancer.DrappingServiceRoutine.IDrappingServiceRoutine>, DrappingTestLoadBalancer.DrappingServiceRoutine.IDrappingServiceRoutine {
        
        public DrappingServiceRoutineClient() {
        }
        
        public DrappingServiceRoutineClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DrappingServiceRoutineClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DrappingServiceRoutineClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DrappingServiceRoutineClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistResponseDto IsFileExist(DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistRequestDto isfileexistdto) {
            return base.Channel.IsFileExist(isfileexistdto);
        }
        
        public System.Threading.Tasks.Task<DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistResponseDto> IsFileExistAsync(DrappingTestLoadBalancer.DrappingServiceRoutine.IsFileExistRequestDto isfileexistdto) {
            return base.Channel.IsFileExistAsync(isfileexistdto);
        }
        
        public DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageResponseDto DrapImage(DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageRequestDto drapimageresponsedto) {
            return base.Channel.DrapImage(drapimageresponsedto);
        }
        
        public System.Threading.Tasks.Task<DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageResponseDto> DrapImageAsync(DrappingTestLoadBalancer.DrappingServiceRoutine.DrapImageRequestDto drapimageresponsedto) {
            return base.Channel.DrapImageAsync(drapimageresponsedto);
        }
        
        public DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileResponceDto SaveImage(DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileRequestDto savefilerequestdto) {
            return base.Channel.SaveImage(savefilerequestdto);
        }
        
        public System.Threading.Tasks.Task<DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileResponceDto> SaveImageAsync(DrappingTestLoadBalancer.DrappingServiceRoutine.SaveFileRequestDto savefilerequestdto) {
            return base.Channel.SaveImageAsync(savefilerequestdto);
        }
    }
}
